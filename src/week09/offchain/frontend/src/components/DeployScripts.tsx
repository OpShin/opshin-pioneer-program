import { PolicyId, Unit } from "lucid-cardano";
import React, { useContext, useState } from "react";
import {
    applyParamsToScript,
    Data,
    MintingPolicy,
    fromText,
} from "lucid-cardano";
import { AppStateContext } from "@/pages/_app";
import { signAndSubmitTx } from "@/utilities/utilities";

export default function DeployScripts() {
    const { appState, setAppState } = useContext(AppStateContext);
    const {
        lucid,
        wAddr,
        oracleScript,
        collateralScript,
        txScriptsDeployment,
    } = appState;
    const [mPerc, setMPerc] = useState(150n);

    const parseMinPerc = (r: string) => {
        const mPerc = BigInt(Number(r));
        if (Number.isNaN(mPerc)) return;
        setMPerc(mPerc);
    };

    const getFinalMintingPolicy = async () => {
        if (!lucid || !wAddr || !oracleScript || !mPerc) return;
        const tn = fromText("USDP");
        const oracleValidatorHash = await lucid.utils.validatorToScriptHash(
            oracleScript
        );
        const collateralValidatorHash = await lucid.utils.validatorToScriptHash(
            collateralScript
        );

        console.log("Applying minting script to these parameters: ", {
            OracleValHash: oracleValidatorHash,
            CollateralValHash: collateralValidatorHash,
            minPercent: mPerc,
        });

        const Params = Data.Tuple([Data.Bytes(), Data.Bytes(), Data.Integer()]);
        type Params = Data.Static<typeof Params>;
        const scPolicy: MintingPolicy = {
            type: "PlutusV2",
            script: applyParamsToScript<Params>(
                "590f84590f810100003232323322323233223232323232332232323232323232323232323232323232323232323232323232323232222232232325335323232323232323232323232325333500a15335533550041033133573892116696e76616c6964206275726e696e6720616d6f756e7400032153355335533550062133018500935001222002103210331335738921196f776e65722773207369676e6174757265206d697373696e6700032153355002103313357389211b4d696e74696e6720696e7374656164206f66206275726e696e672100032103210321533553355004103313357389211a696e76616c6964206c69717569646174696e6720616d6f756e7400032153355335333573466e20c004ccc058d5401c888800c080080cdc0811a8028198190819899ab9c491216c69717569646174696f6e207468726573686f6c64206e6f74207265616368656400032153355002103313357389211b4d696e74696e6720696e7374656164206f66206275726e696e67210003210321032153355335333573466e2540152000032033103313357389211e6d696e74656420616d6f756e74206d75737420626520706f73697469766500032153355335333573466e20c004ccc058d5400c8800408008140140c80cc40cc4cd5ce249196d696e74656420616d6f756e742065786365656473206d6178000321533553353301a355003220025008215335333573466e3cd400488800cc0800280d00cc54cd4ccd5cd19b873500122200150060340331330185009350012220021033103310321033133573892122696e76616c696420646174756d20617420636f6c6c61746572616c206f7574707574000321032103223370666e08cdc18009a806911000a99a99191a80111112999a8010a82190981200090a99a998110008031098128008a8222804a99a98059aa8041111111111110058981aa4c442a66a00220044426072931080089931901c99ab9c4901184f7261636c65277320646174756d206e6f7420666f756e64000404820225e84ccd5cd19b885003480000c40c054cd4c8c8d4004888888888888ccd54c0904800488d40088888d401088cd4008802094cd4ccd5cd19b8f001017047046133504d335504f0050060081008504500a50063500a22200213033498884d4008894cd400c4cd540f0008004884c0e52615335500221333573466e1ccdc08101a800911000a801018017881709998089aa801911111111111004180d0021b9849010455534450001330143550012222002500215335300535500122222222222200c130304988854cd40044008884c0d126135001220023333573466e1cd55cea80324000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40a80acd5d0a80619a8150159aba1500b33502a02c35742a014666aa05ceb940b4d5d0a804999aa8173ae502d35742a01066a0540666ae85401cccd540b80d1d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f9d69aba15002303f357426ae8940088c98c811ccd5ce02102702289aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81f3ad35742a004607e6ae84d5d1280111931902399ab9c04204e045135573ca00226ea8004d5d09aba2500223263204333573807c09408226aae7940044dd50009aba1500533502a75c6ae854010ccd540b80c08004d5d0a801999aa8173ae200135742a00460646ae84d5d1280111931901f99ab9c03a04603d135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00c60446ae84d5d1280311931901899ab9c02c03802f3333573466e1d401d20042122200223333573466e1d402120022122200323333573466e1d402520002122200123263203233573805a07206005e05c640026aa06c44a66a0022a06246442a66a660366aa00444440086606c60726a00e444006a06e266a066a004600a0022600a00226a00244002640026aa06a44a66a0022a06046442a66a660346aa00444440086606a60706a00c444004a06c266a064a004600a0022600a00226a00244002666444246660020080060046eb8020dd70039bad006103313263202c33573892010350543500033135573ca00226ea80044d55ce9baa001222323230010053200135502f223350014800088d4008894cd4ccd5cd19b8f00200902702613007001130060033200135502e223350014800088d4008894cd4ccd5cd19b8f0020070260251001130060032235002222222222222533533355300f12001321233001225335002210031001002503425335333573466e3c0380040ac0a84d40d8004540d4010840ac40a4c8004d540a488448894cd40044d400c88004884ccd401488008c010008ccd54c01c48004014010004c8004d540a088448894cd40044008884cc014008ccd54c01c48004014010004894ccd40084c98c8084cd5ce24929466f756e6420436f6c6c61746572616c206f757470757420627574204e6f4f7574707574446174756d000282130050012153353300400100221300600115026232235001222222222222300e002320013550272253350011502522135002225335333573466e3c00801c07c0784d40a80044c01800c8c8c8c8c8ccccccd5d200291999ab9a3370e6aae7540152000233335573ea00a4a05246666aae7d4014940a88cccd55cfa8029281591999aab9f35744a00c4a66a601a6ae854024854cd4c038d5d0a80490a99a98071aba150092135030123330010040030021502e1502d1502c2502c02e02d02c02b2502802225027250272502725027029135744a00226ae8940044d55cf280089baa0012333333357480024a0444a0444a04446a0466eb4008940880908ccccccd5d20009281092810928109281091a8111bae002023235001223333500123263201e3357389201024c6800025200123263201e3357389201024c680002523263201e3357389201024c680002548900223500222350032232335005233500425335333573466e3c00800406c0685400c406880688cd4010806894cd4ccd5cd19b8f00200101b01a15003101a153350032153350022133500223350022335002233500223300d002001201d2335002201d23300d00200122201d222335004201d2225335333573466e1c01800c08007c54cd4ccd5cd19b8700500202001f1333573466e1c01000408007c407c407c406054cd400484060406088ccd5cd19b8f0020010130124800048c88c008dd6000990009aa80f111999aab9f0012501a233501930043574200460066ae8800807c8c8c8cccd5cd19b8735573aa004900011991091980080180118051aba150023005357426ae8940088c98c8060cd5ce00980f80b09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa004900011981018099aba1500233500d012357426ae8940088c98c8074cd5ce00c01200d89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403e66ae7006809807407006c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201933573802804002e26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab0013200135501b223233335573e0044a030466a02e66aa032600c6aae754008c014d55cf280118021aba200301d13574200224464646666ae68cdc3a800a400046a034600a6ae84d55cf280191999ab9a3370ea00490011280d11931900b19ab9c01101d014013135573aa00226ea80048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900b19ab9c01101d014013012011135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900919ab9c00d019010135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8040cd5ce00580b80709baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8064cd5ce00a01000b80b00a80a00980900889aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6402466ae7003406404003c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c050dd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200f33573801402c01a01826aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6402066ae7002c05c0380340304d55cea80089baa0012323333573466e1d40052002200523333573466e1d40092000200523263200c33573800e02601401226aae74dd5000891001091000a48103505431002326320053357389212165787065637465642065786163746c79206f6e65206f7261636c6520696e7075740000c23263200433573892012665787065637465642065786163746c79206f6e6520636f6c6c61746572616c206f75747075740000b23263200333573892012565787065637465642065786163746c79206f6e6520636f6c6c61746572616c20696e7075740000a4984488008488488cc00401000c448848cc00400c0088848cc00400c00848488c00800c44880048488c00400c48004448c8c00400488cc00cc008008005",
                [oracleValidatorHash, collateralValidatorHash, mPerc],
                Params
            ),
        };
        const scPolicyId: PolicyId = lucid!.utils.mintingPolicyToId(scPolicy);

        const unit: Unit = scPolicyId + tn;
        const potentialStateUpdate = {
            scPolicyIdHex: scPolicyId,
            scTokenNameHex: tn,
            scAssetClassHex: unit,
            scPolicy: scPolicy,
            minPercent: Number(mPerc),
            oracleScriptHash: oracleValidatorHash,
            collateralScriptHash: collateralValidatorHash,
        };

        return potentialStateUpdate;
    };

    const deployBothScriptsInOneTx = async () => {
        if (!lucid || !wAddr || txScriptsDeployment) return;
        console.log("deployBothScriptsInOneTx -> appState: ", appState);
        const psu = await getFinalMintingPolicy();
        if (!psu?.scPolicy) return;
        const tx = await lucid
            .newTx()
            .payToAddressWithData(
                wAddr,
                { inline: Data.void(), scriptRef: collateralScript },
                {}
            )
            .payToAddressWithData(
                wAddr,
                { inline: Data.void(), scriptRef: psu.scPolicy },
                {}
            )
            .complete();

        const pid = await signAndSubmitTx(tx);

        setAppState({
            ...appState,
            ...psu,
            txScriptsDeployment: pid,
        });
    };

    return (
        <div className="flex flex-col justify-center items-center">
            <div className="flex flex-row w-full justify-center items-center my-8 text-lg text-zinc-800 font-quicksand">
                <p>Minimum Percentage of Collateral:</p>
                <input
                    type="number"
                    value={Number(mPerc)}
                    onChange={(e) => parseMinPerc(e.target.value)}
                    className="w-16 py-1 px-2 ml-2 border border-zinc-700 rounded"
                />
            </div>
            <button
                onClick={deployBothScriptsInOneTx}
                disabled={
                    !wAddr || !oracleScript || !mPerc || !!txScriptsDeployment
                }
                className="rounded-lg py-3 px-8 max-w-sm text-zinc-50 bg-zinc-800 shadow-[0_5px_0px_0px_rgba(0,0,0,0.6)] disabled:active:translate-y-0 disabled:active:shadow-[0_5px_0px_0px_rgba(0,0,0,0.2)] disabled:bg-zinc-200  disabled:shadow-[0_5px_0px_0px_rgba(0,0,0,0.2)] disabled:text-zinc-600 font-quicksand font-bold active:translate-y-[2px] active:shadow-[0_4px_0px_0px_rgba(0,0,0,0.6)]"
            >
                {" "}
                Deploy Scripts
            </button>
        </div>
    );
}
